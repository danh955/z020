@implements IDisposable
@using z020.Website.Services.TicTacToe;
@inject TicTacToeEngine ttt

<MudPaper Elevation="3" Class="pa-1 ma-2">
    <MudPaper Elevation="2" Class="pa-2 mb-2">
        <b>Name</b>: @board?.Name &nbsp; &nbsp;  <b>X</b>: @board?.PlayerX?.Name &nbsp; &nbsp; <b>O</b>: @board?.PlayerO?.Name
    </MudPaper>
    <table class="TicTacToe">
        @for (int row = 0; row < 9; row += 3)
        {
            <tr>
                @for (int col = 0; col < 3; col++)
                {
                    int idx = row + col;
                    <td onclick="@(()=>SetPiece(idx))">@GetMark(idx)</td>
                }
            </tr>
        }
    </table>
    <MudButton OnClick="@(() =>ClearBoard())" Color="Color.Primary">Clear Board</MudButton>
    @message
</MudPaper>

@code
{
    [Parameter]
    public string? BoardName { get; set; }

    private TicTacToeBoard? board;
    private string? message;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (BoardName == null)
        {
            message = $"Board '{BoardName}' not found";
            return;
        }

        board = ttt.GetBoard(BoardName);

        board.OnBoardChanged += BoardChanged;
        board.PlayerX = new("Mr. X");
        board.PlayerO = new("Mr. O");
    }

    private void SetPiece(int idx)
    {
        if (board?.PlayerX != null)
        {
            board.SetPayerPiece(idx, board.PlayerX);
        }
    }

    private char GetMark(int idx)
    {
        return board?.Square[idx] switch
        {
            Pieces.X => '\u2715',
            Pieces.O => '\u25EF',
            _ => ' ',
        };
    }

    private void BoardChanged() => this.StateHasChanged();

    private void ClearBoard() => board?.ClearBoard(); 

    public void Dispose()
    {
        if (board != null)
        {
            board.OnBoardChanged -= BoardChanged;
        }
    }
}